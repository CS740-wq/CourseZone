import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { Course } from "@/entities/Course";
import { Purchase } from "@/entities/Purchase";
import { createPageUrl } from "@/utils";
import { BookOpen, Clock, Award, Play, Star, TrendingUp, Search, Filter, Grid, List, User as UserIcon, Calendar, Trophy, Target } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default function DashboardPage() {
  const [user, setUser] = useState(null);
  const [purchasedCourses, setPurchasedCourses] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [allCourses, setAllCourses] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [viewMode, setViewMode] = useState("grid");

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      await loadUserData(currentUser);
    } catch (error) {
      await User.login();
    }
  };

  const loadUserData = async (currentUser) => {
    setIsLoading(true);
    
    try {
      const purchases = await Purchase.filter({ user_email: currentUser.email });
      const courses = await Course.list();
      setAllCourses(courses);
      
      const purchasedCourseData = purchases.map(purchase => {
        const course = courses.find(c => c.id === purchase.course_id);
        const progress = Math.floor(Math.random() * 100); // Simulated progress
        const lastAccessed = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000);
        return { 
          ...course, 
          purchase,
          progress,
          lastAccessed,
          status: progress === 100 ? 'completed' : progress > 0 ? 'in-progress' : 'not-started'
        };
      }).filter(course => course.id);
      
      setPurchasedCourses(purchasedCourseData);
    } catch (error) {
      console.error("Error loading user data:", error);
    }
    
    setIsLoading(false);
  };

  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Good morning";
    if (hour < 18) return "Good afternoon";
    return "Good evening";
  };

  const getStats = () => {
    const totalCourses = purchasedCourses.length;
    const completedCourses = purchasedCourses.filter(c => c.status === 'completed').length;
    const inProgressCourses = purchasedCourses.filter(c => c.status === 'in-progress').length;
    const totalHours = purchasedCourses.reduce((total, course) => {
      const duration = course.duration || "0h";
      const hours = parseInt(duration.match(/\d+/)?.[0] || 0);
      return total + hours;
    }, 0);
    const avgProgress = totalCourses > 0 ? Math.round(purchasedCourses.reduce((sum, c) => sum + c.progress, 0) / totalCourses) : 0;

    return { totalCourses, completedCourses, inProgressCourses, totalHours, avgProgress };
  };

  const filteredCourses = purchasedCourses.filter(course => {
    const matchesSearch = course.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         course.instructor?.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesFilter = filterStatus === "all" || course.status === filterStatus;
    return matchesSearch && matchesFilter;
  });

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-blue-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  const stats = getStats();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Enhanced Header */}
        <div className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-gray-900 to-blue-600 bg-clip-text text-transparent mb-2">
                {getGreeting()}, {user.full_name?.split(' ')[0] || 'Learner'}! ðŸ‘‹
              </h1>
              <p className="text-xl text-gray-600">
                Continue your learning journey â€¢ {stats.avgProgress}% overall progress
              </p>
            </div>
            <div className="flex items-center gap-3">
              <div className="text-right">
                <p className="text-sm text-gray-500">Current Streak</p>
                <p className="text-2xl font-bold text-orange-500">7 days ðŸ”¥</p>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 md:gap-6 mb-8">
          <Card className="glass-effect border-0 hover-lift">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">Total Courses</p>
                  <p className="text-2xl md:text-3xl font-bold text-gray-900">{stats.totalCourses}</p>
                </div>
                <div className="w-10 h-10 md:w-12 md:h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                  <BookOpen className="w-5 h-5 md:w-6 md:h-6 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-effect border-0 hover-lift">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">Completed</p>
                  <p className="text-2xl md:text-3xl font-bold text-green-600">{stats.completedCourses}</p>
                </div>
                <div className="w-10 h-10 md:w-12 md:h-12 bg-green-100 rounded-xl flex items-center justify-center">
                  <Trophy className="w-5 h-5 md:w-6 md:h-6 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-effect border-0 hover-lift">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">In Progress</p>
                  <p className="text-2xl md:text-3xl font-bold text-orange-500">{stats.inProgressCourses}</p>
                </div>
                <div className="w-10 h-10 md:w-12 md:h-12 bg-orange-100 rounded-xl flex items-center justify-center">
                  <Target className="w-5 h-5 md:w-6 md:h-6 text-orange-500" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-effect border-0 hover-lift">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">Learning Hours</p>
                  <p className="text-2xl md:text-3xl font-bold text-purple-600">{stats.totalHours}h</p>
                </div>
                <div className="w-10 h-10 md:w-12 md:h-12 bg-purple-100 rounded-xl flex items-center justify-center">
                  <Clock className="w-5 h-5 md:w-6 md:h-6 text-purple-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="glass-effect border-0 hover-lift">
            <CardContent className="p-4 md:p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600 mb-1">Certificates</p>
                  <p className="text-2xl md:text-3xl font-bold text-indigo-600">{stats.completedCourses}</p>
                </div>
                <div className="w-10 h-10 md:w-12 md:h-12 bg-indigo-100 rounded-xl flex items-center justify-center">
                  <Award className="w-5 h-5 md:w-6 md:h-6 text-indigo-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Course Management Section */}
        <div className="mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900">My Learning Dashboard</h2>
            <div className="flex items-center gap-3">
              <Button 
                onClick={() => window.location.href = createPageUrl("Home")}
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              >
                Browse More Courses
              </Button>
            </div>
          </div>

          {/* Search and Filters */}
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <Input
                placeholder="Search your courses..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-12 rounded-xl border-gray-200 focus:border-blue-500"
              />
            </div>
            
            <div className="flex gap-3">
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger className="w-40 h-12 rounded-xl">
                  <SelectValue placeholder="Filter" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Courses</SelectItem>
                  <SelectItem value="not-started">Not Started</SelectItem>
                  <SelectItem value="in-progress">In Progress</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                </SelectContent>
              </Select>

              <div className="flex rounded-xl border border-gray-200 p-1">
                <Button
                  variant={viewMode === "grid" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("grid")}
                  className="rounded-lg"
                >
                  <Grid className="w-4 h-4" />
                </Button>
                <Button
                  variant={viewMode === "list" ? "default" : "ghost"}
                  size="sm"
                  onClick={() => setViewMode("list")}
                  className="rounded-lg"
                >
                  <List className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>

          {/* Course Grid/List */}
          {isLoading ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Array(6).fill(0).map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <div className="h-48 bg-gray-200 rounded-t-lg"></div>
                  <CardContent className="p-6">
                    <div className="h-4 bg-gray-200 rounded mb-2"></div>
                    <div className="h-4 bg-gray-200 rounded w-2/3"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : filteredCourses.length > 0 ? (
            <div className={viewMode === "grid" ? "grid md:grid-cols-2 lg:grid-cols-3 gap-6" : "space-y-4"}>
              {filteredCourses.map((course) => (
                <Card key={course.id} className={`hover-lift glass-effect border-0 overflow-hidden ${viewMode === "list" ? "flex" : ""}`}>
                  <div className={`relative ${viewMode === "list" ? "w-48 flex-shrink-0" : ""}`}>
                    <img
                      src={course.image_url || "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=600&h=300&fit=crop"}
                      alt={course.title}
                      className={`object-cover ${viewMode === "list" ? "w-full h-full" : "w-full h-48"}`}
                    />
                    <div className="absolute top-4 right-4">
                      <Badge className={`
                        ${course.status === 'completed' ? 'bg-green-500 hover:bg-green-600' : ''}
                        ${course.status === 'in-progress' ? 'bg-orange-500 hover:bg-orange-600' : ''}
                        ${course.status === 'not-started' ? 'bg-gray-500 hover:bg-gray-600' : ''}
                      `}>
                        {course.status === 'completed' ? 'Completed' : 
                         course.status === 'in-progress' ? 'In Progress' : 'Not Started'}
                      </Badge>
                    </div>
                  </div>
                  
                  <CardContent className={`${viewMode === "list" ? "flex-1" : ""} p-6`}>
                    <div className="flex items-center gap-2 mb-3">
                      {course.level && (
                        <Badge variant="outline" className="text-xs">
                          {course.level}
                        </Badge>
                      )}
                      {course.category && (
                        <Badge variant="outline" className="text-xs">
                          {course.category}
                        </Badge>
                      )}
                    </div>
                    
                    <h3 className="font-bold text-lg mb-2 line-clamp-2">
                      {course.title}
                    </h3>
                    
                    {course.instructor && (
                      <p className="text-sm text-gray-600 mb-3">
                        by {course.instructor}
                      </p>
                    )}

                    {/* Progress Bar */}
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm font-medium text-gray-600">Progress</span>
                        <span className="text-sm font-bold text-gray-900">{course.progress}%</span>
                      </div>
                      <Progress value={course.progress} className="h-2" />
                    </div>
                    
                    <div className="flex items-center gap-4 mb-4 text-sm text-gray-600">
                      {course.duration && (
                        <div className="flex items-center gap-1">
                          <Clock className="w-4 h-4" />
                          {course.duration}
                        </div>
                      )}
                      <div className="flex items-center gap-1">
                        <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                        4.8
                      </div>
                      <div className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        {course.lastAccessed.toLocaleDateString()}
                      </div>
                    </div>

                    <Button 
                      className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                      onClick={() => window.location.href = createPageUrl(`CoursePlayer?courseId=${course.id}`)}
                    >
                      <Play className="w-4 h-4 mr-2" />
                      {course.progress === 0 ? 'Start Learning' : 'Continue Learning'}
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card className="glass-effect border-0">
              <CardContent className="text-center py-12">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <BookOpen className="w-8 h-8 text-blue-600" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  {searchQuery || filterStatus !== "all" ? "No courses found" : "No courses yet"}
                </h3>
                <p className="text-gray-600 mb-6">
                  {searchQuery || filterStatus !== "all" ? 
                    "Try adjusting your search or filters" : 
                    "Start your learning journey by purchasing your first course"
                  }
                </p>
                <Button 
                  onClick={() => window.location.href = createPageUrl("Home")}
                  className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
                >
                  Browse Courses
                </Button>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Learning Analytics */}
        {purchasedCourses.length > 0 && (
          <Card className="glass-effect border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                Learning Analytics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold mb-4">Recent Progress</h4>
                  <div className="space-y-3">
                    {purchasedCourses.slice(0, 3).map((course) => (
                      <div key={course.id} className="flex items-center justify-between">
                        <div className="flex-1">
                          <p className="font-medium text-sm">{course.title}</p>
                          <div className="flex items-center gap-2 mt-1">
                            <Progress value={course.progress} className="flex-1 h-2" />
                            <span className="text-sm text-gray-600 min-w-[3rem]">
                              {course.progress}%
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-4">Achievements</h4>
                  <div className="space-y-3">
                    <div className="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <Trophy className="w-6 h-6 text-green-600" />
                      <div>
                        <p className="font-medium text-green-800">Course Completed</p>
                        <p className="text-sm text-green-600">Finished {stats.completedCourses} courses</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 p-3 bg-blue-50 rounded-lg">
                      <Target className="w-6 h-6 text-blue-600" />
                      <div>
                        <p className="font-medium text-blue-800">Learning Streak</p>
                        <p className="text-sm text-blue-600">7 days in a row</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
